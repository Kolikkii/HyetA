# meta developer: @Komarik228Komary
# meta name: GeminiDev
# meta version: 3.1

from .. import loader, utils
import aiohttp
import json
import io
import re
import asyncio
import random

@loader.tds
class GeminiDev(loader.Module):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ Gemini"""

    strings = {
        "name": "GeminiDev",
        "no_key": "‚ùå <b>API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–∫–∞–∂–∏:\n.config GeminiDev gemini_api_keys –∫–ª—é—á1,–∫–ª—é—á2</b>",
        "prompt_set": "‚úÖ <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>",
        "no_txt": "‚ùå <b>–û—Ç–≤–µ—Ç—å –Ω–∞ .txt —Ñ–∞–π–ª</b>",
        "no_query": "‚ùå <b>–£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ</b>",
        "generating": "üß† <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è...</b>",
        "checking": "üß™ <b>–ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞...</b>",
        "fixing": "üîß <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞...</b>",
        "refining": "üìà <b>–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é...</b>",
        "merging": "üß¨ <b>–ê–Ω–∞–ª–∏–∑ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π...</b>",
        "result_info": (
            "<b>üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{name}</code>\n"
            "<b>üë§ –ê–≤—Ç–æ—Ä:</b> <code>{author}</code>\n"
            "<b>üß© –ö–æ–º–∞–Ω–¥—ã:</b> <code>{commands}</code>\n"
            "<b>üìé –í–µ—Ä—Å–∏—è:</b> <code>1.0</code>\n"
            "<b>üîå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:</b> <code>{deps}</code>"
        ),
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "gemini_api_keys",
                "",
                lambda: "–ö–ª—é—á–∏ Gemini API (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
                validator=loader.validators.String(),
            )
        )
        self.base_prompt = ""
        self._keys = []
        self._key_index = 0
        self._merge_buffer = {}

    async def client_ready(self, client, db):
        self.db = db
        self.base_prompt = self.db.get("GeminiDev", "prompt", "")
        raw_keys = self.config["gemini_api_keys"]
        self._keys = [k.strip().replace("\u200e", "") for k in raw_keys.split(",") if k.strip()]
        random.shuffle(self._keys)

    async def promtcmd(self, message):
        """<reply to .txt> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        reply = await message.get_reply_message()
        if not reply or not reply.file or not reply.file.name.endswith(".txt"):
            return await utils.answer(message, self.strings("no_txt"))

        buf = io.BytesIO()
        await reply.download_media(buf)
        prompt = buf.getvalue().decode("utf-8")
        self.base_prompt = prompt
        self.db.set("GeminiDev", "prompt", prompt)

        await utils.answer(message, self.strings("prompt_set"))

    async def geminicall(self, user_prompt: str) -> str:
        if not self._keys:
            return self.strings("no_key")

        prompt = f"{self.base_prompt.strip()}\n\n{user_prompt.strip()}"
        headers = {"Content-Type": "application/json"}
        data = {
            "contents": [{"parts": [{"text": prompt}]}],
            "generationConfig": {
                "temperature": 0.7,
                "topK": 40,
                "topP": 0.95,
                "maxOutputTokens": 999999
            }
        }

        tried = set()
        while len(tried) < len(self._keys):
            key = self._keys[self._key_index]
            self._key_index = (self._key_index + 1) % len(self._keys)
            tried.add(key)

            try:
                url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={key}"
                async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=150)) as session:
                    async with session.post(url, headers=headers, json=data) as r:
                        res = await r.json()
                        if "candidates" in res:
                            return res["candidates"][0]["content"]["parts"][0]["text"]
                        if "error" in res:
                            msg = res["error"].get("message", "")
                            code = str(res["error"].get("code", ""))
                            if any(x in msg.lower() for x in ["exceeded", "limit", "quota", "unavailable"]) or code in {"429", "403", "503"}:
                                continue
                            return f"‚ùå –û—à–∏–±–∫–∞ Gemini:\n<code>{msg or code or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</code>"
                        return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:\n<code>{json.dumps(res, indent=2)}</code>"
            except Exception:
                continue

        return "‚ùå –í—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

    def extract_code(self, raw: str) -> str:
        if "```" in raw:
            parts = re.findall(r"```(?:python)?(.*?)```", raw, re.S)
            return parts[0].strip() if parts else raw.strip()
        return raw.strip()

    def extract_deps(self, code: str, hint: str = "") -> str:
        stdlib = {
            "re", "io", "sys", "os", "math", "time", "random", "json", "typing",
            "datetime", "logging", "asyncio", "builtins"
        }
        found = set(re.findall(r"^\s*(?:from|import)\s+([a-zA-Z0-9_]+)", code, re.M))
        for line in re.findall(r"(?i)pip install (.+)", hint):
            for lib in re.split(r"[,\s]+", line):
                if lib and lib not in stdlib:
                    found.add(lib)
        return ", ".join(sorted(found - stdlib)) if found else "–Ω–µ—Ç—É"

    def extract_commands(self, code: str) -> str:
        cmd_regex = re.compile(r"@loader\.command[^\n]*\n\s*async\s+def\s+([a-zA-Z0-9_]+cmd)\s*\(")
        matches = cmd_regex.findall(code)
        if not matches:
            matches = re.findall(r"async def ([a-zA-Z0-9_]+cmd)\s*\(", code)
        return ", ".join(matches[:5]) or "‚Äî"

    async def send_result(self, message, code: str, hint: str):
        name_match = re.search(r"class\s+(\w+)\s*\(", code)
        name = name_match.group(1) if name_match else "GeneratedModule"
        commands = self.extract_commands(code)
        deps = self.extract_deps(code, hint)

        user = await message.client.get_entity(message.sender_id)
        author = f"@{user.username}" if user.username else f"id:{user.id}"

        msg = self.strings("result_info").format(name=name, author=author, commands=commands, deps=deps)
        f = io.BytesIO(code.encode("utf-8"))
        f.name = f"{name}.py"
        await message.reply(file=f, message=msg)

    async def gencmd(self, message):
        """<–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
        query = utils.get_args_raw(message)
        if not query:
            return await utils.answer(message, self.strings("no_query"))

        await utils.answer(message, self.strings("generating"))

        prompt = (
            "–°–æ–∑–¥–∞–π Telethon-–º–æ–¥—É–ª—å –¥–ª—è Telegram-—é–∑–µ—Ä–±–æ—Ç–∞.\n"
            "–í—ã—Ö–æ–¥–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî .py —Ñ–∞–π–ª —Å loader.Module.\n"
            "–î–æ–±–∞–≤—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫ –Ω–µ–π.\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{query}"
        )

        raw = await self.geminicall(prompt)
        code = self.extract_code(raw)

        await utils.answer(message, self.strings("checking"))
        _ = await self.geminicall(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏:\n```python\n{code}\n```")

        await utils.answer(message, self.strings("fixing"))
        fixed = await self.geminicall(f"–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º –∫–æ–¥–µ:\n```python\n{code}\n```")
        final = self.extract_code(fixed)

        await self.send_result(message, final, fixed)

    async def refinecmd(self, message):
        """<–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å .py –º–æ–¥—É–ª—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if not args or not reply or not reply.file or not reply.file.name.endswith(".py"):
            return await utils.answer(message, "‚ùå <b>–û—Ç–≤–µ—Ç—å –Ω–∞ .py —Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ</b>")

        buf = io.BytesIO()
        await reply.download_media(buf)
        code = buf.getvalue().decode("utf-8")

        await utils.answer(message, self.strings("refining"))

        prompt = (
            "–£–ª—É—á—à–∏ —ç—Ç–æ—Ç Telethon-–º–æ–¥—É–ª—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É loader.Module.\n\n"
            f"```python\n{code}\n```\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π:\n{args}"
        )

        improved = await self.geminicall(prompt)
        improved_code = self.extract_code(improved)

        await utils.answer(message, self.strings("checking"))
        _ = await self.geminicall(f"–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ—Ç –∫–æ–¥ Python:\n```python\n{improved_code}\n```")

        await utils.answer(message, self.strings("fixing"))
        fixed = await self.geminicall(f"–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º –∫–æ–¥–µ:\n```python\n{improved_code}\n```")
        final = self.extract_code(fixed)

        await self.send_result(message, final, fixed)

    async def mergecmd(self, message):
        """–û–±—å–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –º–æ–¥—É–ª–µ–π –≤ –æ–¥–∏–Ω"""
        reply = await message.get_reply_message()
        if not reply or not reply.file or not reply.file.name.endswith(".py"):
            return await utils.answer(message, "‚ùå <b>–û—Ç–≤–µ—Ç—å –Ω–∞ .py –º–æ–¥—É–ª—å</b>")

        buf = io.BytesIO()
        await reply.download_media(buf)
        code = buf.getvalue().decode("utf-8")

        user_id = str(message.sender_id)

        if user_id not in self._merge_buffer:
            self._merge_buffer[user_id] = code
            return await utils.answer(message, "‚úÖ <b>–ú–æ–¥—É–ª—å –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å –≤—Ç–æ—Ä–æ–π —á–µ—Ä–µ–∑ .merge</b>")

        old_code = self._merge_buffer.pop(user_id)
        await utils.answer(message, self.strings("merging"))

        _ = await self.geminicall(
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–≤–∞ –º–æ–¥—É–ª—è Telegram userbot –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∂–¥–æ–≥–æ:\n\n"
            f"–ú–æ–¥—É–ª—å 1:\n```python\n{old_code}\n```\n\n"
            f"–ú–æ–¥—É–ª—å 2:\n```python\n{code}\n```"
        )

        merged = await self.geminicall(
            f"–û–±—ä–µ–¥–∏–Ω–∏ –¥–≤–∞ –º–æ–¥—É–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –ª—É—á—à–∏–µ —á–∞—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ. –£–¥–∞–ª–∏ –¥—É–±–ª–∏ –∏ –æ—Å—Ç–∞–≤—å –æ–¥–Ω—É loader.Module —Å—Ç—Ä—É–∫—Ç—É—Ä—É.\n\n"
            f"–ú–æ–¥—É–ª—å 1:\n```python\n{old_code}\n```\n\n"
            f"–ú–æ–¥—É–ª—å 2:\n```python\n{code}\n```"
        )
        merged_code = self.extract_code(merged)

        fixed = await self.geminicall(
            f"–ü—Ä–æ–≤–µ—Ä—å –∏ –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–º –∫–æ–¥–µ:\n```python\n{merged_code}\n```"
        )
        final_code = self.extract_code(fixed)

        await self.send_result(message, final_code, fixed)